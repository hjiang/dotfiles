*rails.txt*	Plugin for working with Ruby on Rails applications

Author: Tim Pope <vimNOSPAM@tpope.info>		*rails-plugin-author*

|rails-introduction|	Introduction and Feature Summary
|rails-installation|	Installation and Usage
|rails-configuration|	Configuration
|rails-options|		Managed Vim Options
|rails-navigation|	Navigation
|rails-mappings|	Mappings
|rails-commands|	Commands
|rails-partials|	Partial Extraction
|rails-todo|		To Do

This plugin is only available if 'compatible' is not set.

{Vi does not have any of this}

==============================================================================
INTRODUCTION					*rails-introduction* *rails*

TextMate may be the latest craze for developing Ruby on Rails applications,
but Vim is forever.  This plugin offers the following features for Ruby on
Rails application development.

1. Automatically detects buffers containing files from Rails applications,
   and applies settings to those buffers (and only those buffers).  You can
   use an autocommand to apply your own custom settings as well.
   |rails-configuration|

2. Unintrusive.  Only files in a Rails application should be affected; regular
   Ruby scripts are left untouched.  Even when enabled, the plugin should keep
   out of your way if you're not using its features.  (If you find a situation
   where this is not a case, contact the |rails-plugin-author|.)

3. Provides reasonable settings for working with Rails applications.  Rake is
   the 'makeprg' (and it always knows where your Rakefile is), 'shiftwidth'
   is 2, and 'path' includes an appropriate collection of directories from
   your application. |rails-options|

4. Easy navigation of the Rails directory structure.  |gf| considers context
   and knows about partials, fixtures, and much more.  There are mappings for
   easy jumping between files, including favorites like model to migration,
   template to helper, and controller to functional test. |rails-navigation|

5. Partial extraction.  |:Rpartial| {file} replaces the desired range (ideally
   selected in visual line mode) with "render :partial => '{file}'", which is
   automatically created with your content.  The @{file} instance variable is
   replaced with the {file} local variable. |rails-partials|

6. Enhanced syntax highlighting.  From has_and_belongs_to_many to
   distance_of_time_in_words, it's here.

7. Interface to script/*.  Generally, use ":Rscript about" to call
   "script/about".  Some commands have additional features:
   ":Rgenerate controller Blog" generates a blog controller and edits
   apps/controllers/blog_controller.rb. |rails-commands|

8. Snippets.  (Just kidding.)

==============================================================================
INSTALLATION AND USAGE				*rails-installation*

If you have the zip file, extract it to vimfiles (Windows) or ~/.vim
(everything else).  You should have the following files: >
	plugin/rails.vim
	doc/rails.txt
See |add-local-help| for instructions on enabling the documentation.  In a
nutshell: >
	:helptags ~/.vim/doc

Whenever you edit a file in a Rails application, this plugin will be
automatically activated.  This sets various options and defines a few
buffer-specific commands.

==============================================================================
CONFIGURATION					*rails-configuration*

Very little configuration is actually required; this plugin automatically
detects and adjusts Vim sensibly and subtly.

					*rails-:autocmd* *rails-autocommands*
If you would like to set your own custom Vim settings whenever a Rails file is
loaded, you can use an autocommand like the following in your vimrc: >
	autocmd User Rails*		silent! Rlcd
You can also have autocommands that only apply to certain types of files.
These are based off the information shown in the statusline (see
|rails-'statusline'|), with hyphens changed to asterisks. A few examples: >
	autocmd User Rails*test*	iabbr <buffer> ae assert_equal
	autocmd User Rails*view*rhtml*	nmap  <buffer> <C-T> <Plug>RailsMagicM
	autocmd User Rails*model*ar*	iabbr <buffer> vfo validates_format_of
End all Rails autocommands with asterisks, even if you have an exact
specification.

						*config/rails.vim*
If you have settings particular to a specific project, they can be put in a
config/rails.vim file in the root directory of that application.  The file is
sourced in the |sandbox| for security reasons.  This only works in Vim 7 or
newer.

A few global variables control the behavior of this plugin.  In general, they
can be enabled by setting them to 1 in your vimrc, and disabled by setting
them to 0. >
	let g:rails_some_option=1
	let g:rails_some_option=0
<
						*g:rails_level*  >
	let g:rails_level=3
This is a general control of the level of features loaded.  Behavior can be
subsequently refined with other settings.

value	meaning ~

-1	Completely disabled.
0	User level autocommands only.
1	Minimal features; mainly option management.
2	Default, minus a few niceties like mappings and the statusline.
3	Default.  Includes all but a few possibly disruptive features.
4	Enables all normal features.  Recommended.
5+	Experimental features.

						*g:loaded_rails*  >
	let g:loaded_rails=1
Do not load the plugin. For emergency use only.

						*g:rails_avim_commands*  >
	let g:rails_avim_commands=1
Adds some a.vim compatible aliases for |:Ralternate|, like :A, :AS, :AV, and
:AT.  This does not require a.vim.  (a.vim is a plugin for easily alternating
between, for example, foo.c and foo.h.  If it's installed, you can see
|alternate.txt| for more information.)  Enabled when |g:rails_level| >= 3.

						*g:rails_default_file*  >
	let g:rails_default_file='config/database.yml'
File to load when a new Rails application is created.  Defaults to the README.

						*g:rails_default_database*  >
	let g:rails_default_database='sqlite3'
Database to use for new applications.  Defaults to letting Rails decide.
 
					*rails-slow* *g:rails_expensive*  >
	let g:rails_expensive=1
Enables or disables expensive (slow) features (typically involving calls to
the Ruby interpreter).  Recommended for moderately fast computers.  Enabled
when |g:rails_level| >= 3 (>= 4 on Windows, which is decidedly slower in the
author's experience).

						*g:rails_isfname*  >
	let g:rails_isfname=1
Enables changes to the 'isfname' option.  Should no longer be necessary.

						*g:rails_leader*  >
	let g:rails_leader='<LocalLeader>r'
Prefix for mappings.  See |rails-mappings|.

						*g:rails_mappings*  >
	let g:rails_mappings=1
Enables a few <LocalLeader> mappings.  See |rails-mappings|. Enabled when
|g:rails_level| >= 3.

						*g:rails_statusline*  >
	let g:rails_statusline=1
Give a clue in the statusline when this plugin is enabled.  This requires that
the current filetype is in your existing 'statusline'.  Enabled when
|g:rails_level| >= 3.

						*g:rails_syntax*  >
	let g:rails_syntax=1
When enabled, this tweaks the syntax highlighting to be more Rails friendly.
Enabled when |g:rails_level| >= 2.

						*g:rails_subversion*  >
	let g:rails_subversion=1
Automatically add/remove files to the subversion repository for commands like
|:Rgenerate| and |:Rdestroy| (but not |:Rscript|).  Ignored when the
application is not part of a subversion repository.  Enabled with
|g:rails_level| >= 3.

						*g:rails_root_url*  >
	let g:rails_root_url='http://localhost:3000/'
Used for the |:Rpreview| command.  Default is as shown above.  Overridden by
b:rails_root_url.

When g:rails_syntax is enabled, you may find your Ruby files to be a bit heavy
on the cyan (or however your Identifiers are highlighted).  You may want to
enable g:ruby_no_identifiers, as explained in |ft-ruby-syntax|.

==============================================================================
MANAGED VIM OPTIONS			*rails-options*

The following options are set local to buffers where the plugin is active.

					*rails-'shiftwidth'*	*rails-'sw'*
					*rails-'softtabstop'*	*rails-'sts'*
					*rails-'expandtab'*	*rails-'et'*
A value of 2 is used for 'shiftwidth' (and 'softtabstop'), and 'expandtab' is
enabled.  This is a strong convention in Rails, so the conventional wisdom
that this is a user preference has been ignored.

					*rails-'path'*		*rails-'pa'*
All the relevant directories from your application are added to your 'path'.
This makes it easy to access a buried file: >
	:find blog_controller.rb
<
					*rails-'suffixesadd'*	*rails-'sua'*
This is filetype dependent, but typically includes .rb, .rhtml, and several
others.  This allows shortening the above example: >
	:find blog_controller
<
					*rails-'includeexpr'*	*rails-'inex'*
The 'include' and 'includeexpr' options are set to enable the magic described
in |rails-gf|.

					*rails-'statusline'*	*rails-'stl'*
Useful information is added to the 'statusline', but only when the existing
statusline contains the file type (this is not the default) and
|g:rails_statusline| is enabled.  This option is set globally because it
appears to have no side effects.

					*rails-'makeprg'*	*rails-'mp'*
					*rails-'errorformat'*	*rails-'efm'*
Rake is used as the 'makeprg', so |:make| will work as expected.  Also, thanks
to the rubyunit compiler, 'errorformat' is set appropriately to handle your
tests.

					*rails-'filetype'*	*rails-'ft'*
The 'filetype' is sometimes adjusted for Rails files.  Most notably, *.rxml
and *.rjs are treated as Ruby files, and files that have been falsely
identified as Mason sources are changed back to ERuby files (but only when
they are part of a Rails application).

					*rails-'completefunc'*	*rails-'cfu'*
A 'completefunc' is provided (if not already set).  It is pretty simple, as it
uses syntax highlighting to make its guess.  See |i_CTRL-X_CTRL-U|.

					*rails-'balloonexpr'*  *rails-'bexpr'*
If ri is installed, 'balloonexpr' is set up to call it.  In order to use it,
'ballooneval' must be set.  See |balloon-eval| for details.

==============================================================================
NAVIGATION					*rails-navigation*

The 'path' has been modified to include all the best places to be.
>
	:find blog_controller
	:find book_test
<
						*rails-gf*
Use |gf|, |CTRL-W_f|, and |CTRL-W_gf| liberally, as 'includeexpr' has been
hacked to make them quite intelligent (if |g:rails_mappings| is enabled,
they are actually mapped instead, for even more magic).

Example uses of |gf|, and where they might lead.
(* indicates cursor position)
>
	Pos*t.find(:first)
<	app/models/post.rb ~
>
	has_many :c*omments
<	app/models/comment.rb ~
>
	link_to "Home", :controller => :bl*og
<	app/controllers/blog_controller.rb ~
>
	<%= render :partial => 'sh*ared/sidebar' %>
<	app/views/shared/_sidebar.rhtml ~
>
	<%= stylesheet_link_tag :scaf*fold %>
<	public/stylesheets/scaffold.css ~
>
	class BlogController < Applica*tionController
<	app/controllers/application.rb ~
>
	class ApplicationController < ActionCont*roller::Base
<	.../action_controller/base.rb ~
>
	fixtures :pos*ts
<	test/fixtures/posts.yml ~
>
	layout :pri*nt
<	app/views/layouts/print.rhtml ~
>
	(In the Blog controller)
	def li*st
<	app/views/blog/list.rhtml ~

Suggestions for further contexts to consider are welcome.

==============================================================================
MAPPINGS					*rails-mappings*

<Plug> mappings are always available (if the plugin is loaded) and can be
manually mapped to the key sequence of your choice.  <LocalLeader>r mappings
are available if |g:rails_mappings| is enabled or |g:rails_level| >= 3.  (The
<LocalLeader>r prefix can be customized with |g:rails_leader|.)  These
mappings are still under development, and it would not be unrealistic for them
to change.

						*<Plug>RailsAlternate*
<Plug>RailsAlternate	Switch to the "alternate" file.  Typically this just
<LocalLeader>ra		adds or removes "_test" from the filename, but try it
			in lots of places; you may be surprised.  This
			might be replaced by |rails-:A| and friends.

						*<Plug>RailsMagicM*
<Plug>RailsMagicM	Magic.  Maybe it will execute the current test Method,
<LocalLeader>rm		or Make all test Methods in the current test run.
			Maybe it will find the create_foos Migration for your
			current Model.  Or Maybe it will find the controller
			Method for your view, or vice versa.  You Might find
			it easiest to try it yourself.

						*<Plug>RailsFind*
<Plug>RailsFind		Find the file under the cursor, taking into account
<LocalLeader>rf		context.  This command is quite intelligent:  See
gf			|rails-gf| for details.

==============================================================================
COMMANDS					*rails-commands*

						*rails-:Rails*
:Rails {directory}	The only global command.  Creates a new Rails
			application in {directory}, and loads the README.

						*rails-:Rake*
:Rake {targets}		Like calling |:make| {targets} (with 'makeprg' being
			rake).  However, in some contexts, if {targets} are
			omitted, :Rake defaults to something sensible (like
			db:migrate in a migration, or your current test).

						*rails-:Rcd*
:Rcd [{directory}]	|:cd| to /path/to/railsapp/{directory}.

						*rails-:Rlcd*
:Rlcd [{directory}]	|:lcd| to /path/to/railsapp/{directory}.

						*rails-:Rscript*
:Rscript {script} {options}
			Call ruby script/{script} {options}.

						*rails-:Rconsole*
:Rconsole {options}	Start script/console.

						*rails-:Rrunner*
:Rrunner {code}		Executes {code} with script/runner.  Different from
			:Rscript runner {code} in that code is passed as one
			argument.

						*rails-:Rgenerate*
:Rgenerate {options}	Calls script/generate {options}, and then edits the
			first file generated.

						*rails-:Rdestroy*
:Rdestroy {options}	Calls script/destroy {options}.

						*rails-:Rlog*
:Rlog [{logfile}]	Split window and open {logfile} ($RAILS_ENV or
			development by default).  The control characters used
			for highlighting are removed.  The usefulness of this
			command is somewhat limited by the current failure to
			reload the file on change  (you might try
			TailMinusF.vim from vim.org).

						*rails-:Rpreview*
:Rpreview [{path}]	Highly experimental command.  Creates a URL from
			http://localhost:3000/ and the {path} given.  If
			{path} is omitted, a sensible default is used.  The
			not too useful default is to then edit this URL using
			Vim itself, allowing |netrw| to download it.  More
			useful is to define a :OpenURL command, which will be
			used instead.  An example command on a Mac might be: >
		:command -bar -nargs=1 OpenURL :!open <args>
<			The following appears to work on Windows: >
		:command -bar -nargs=1 OpenURL :!start cmd /cstart /b <args>
<			Other operating systems are left as an exercise to the
			reader.

						*rails-:Ralternate*
:Ralternate		Load the "alternate" file.  See
			|<Plug>RailsAlternate|.

			*rails-:A* *rails-:AS* *rails-:AV* *:rails-:AT*
:A			These are compatible with Michael Sharpe's a.vim (but
:AS			do not make use of that plugin).  Briefly, they edit,
:AV			split, vertical split, and tabify the "alternate"
:AT			file.  |g:rails_avim_commands| must be enabled.  This
			is likely to become the preferred interface in the
			future.

			*rails-:R* *rails-:RS* *rails-:RV* *:rails-:RT*
:R			These are just like |rails-:A| and friends above, only
:RS			they correspond to |<LocalLeader>RailsMagicM| instead
:RV			of |<LocalLeader>RailsAlternate|.  (Confusing, I
:RT			know).  The same caveats apply.


						*rails-:Rproject*
:Rproject [{file}]	This command is only provided when the |project|
			plugin is installed.  Invoke :Project (typically
			without an argument), and search for the root of the
			current Rails application.  If it is not found, create
			a new project, with appropriate directories (app,
			etc., but not vendor).

						*rails-:Rproject!*
:Rproject! [{file}]	Same as :Rproject, only delete existing project if it
			exists and recreate it.  The logic to delete the old
			project is convoluted and possibly erroneous; report
			any problems to the |rails-plugin-author|.  A handy
			mapping might look something like: >
		autocmd User Rails* map <buffer> <F6> :Rproject!|silent w<CR>
<			As a bonus, this command organizes views into separate
			directories for easier navigation.  The downside of
			this is that you will have to regenerate your project
			each time you add another view directory (which is why
			this command recreates your project each time!).

						*rails-:Rpartial*
:[range]Rpartial [{controller}/]{name}	
			Create a {name} partial from [range] lines (default:
			current line).  See |rails-partials|.


==============================================================================
PARTIAL EXTRACTION				*rails-partials*

The |rails-:Rpartial| command can be used to extract a partial to a new file.

If this is your file, in app/views/blog/show.rhtml: >

  1	<div>
  2	  <h2><%= @post.title %></h2>
  3	  <p><%= @post.body %></p>
  4	</div>

And you issue this command: >

	:2,3Rpartial post

Your file will change to this: >

  1	<div>
  2	  <%= render :partial => 'post' %>
  3	</div>

And app/views/blog/_post.rhtml will now contain: >

  1	<h2><%= post.title %></h2>
  2	<p><%= post.body %></p>

As a special case, if the file had looked like this: >

  1     <% for object in @posts -%>
  2	  <h2><%= object.title %></h2>
  3	  <p><%= object.body %></p>
  4	<% end -%>
<
The end result would have been this: >

  1     <%= render :partial => 'post', :collection => @posts %>
<
The easiest way to choose what to extract is to use |linewise-visual| mode.
Then, a simple >
	:'<,'>Rpartial blog/post
will suffice. (Note the use of a controller name in this example.)

==============================================================================
TODO						*rails-todo*

Abbrevations.  You can enable some experimental ones with
|g:rails_abbreviations| (but don't tell anyone).  Try pa[ and rp<Tab>.

Create and maintain some sort of changelog.

Include a note instructing users to contact the |rails-plugin-author| with all
comments, compliments, and complaints.  Oh, I guess I just did.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
